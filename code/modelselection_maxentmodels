#Conduct model selection on regularizing multiplier (1-10) and feature class (linear and quadratic) for maxent models

# Study areas include: 
  # g1 San Clemente Island
  # g2 Tanner and Cortes Banks
  # g3 Santa Catalina and Santa Barbara Islands
  # g4 La Jolla, California
  # g5 Palos Verdes, California
  # scb Southern California Bight

#Load libraries
library(tidyverse);library(raster);library(rgdal);library(maptools);library(here);library(dismo);library(rJava);library(ENMeval);library(ggpubr) 

#Load environmental data for each study area
layers1<-list.files(path="EnvironmentalData/Group1",pattern='asc',full.names=TRUE)
layers2<-list.files(path="/EnvironmentalData/Group2",pattern='asc',full.names=TRUE)
layers3<-list.files(path="/EnvironmentalData/Group3",pattern='asc',full.names=TRUE)
layers4<-list.files(path="/EnvironmentalData/Group4",pattern='asc',full.names=TRUE)
layers5<-list.files(path="/EnvironmentalData/Group5",pattern='asc',full.names=TRUE)
layers_scb<-list.files(path="/EnvironmentalData/FisheryIndependent/Benthic",pattern='asc',full.names=TRUE)


#stack environmental layers for each study area
layers1<-stack(layers1)
layers2<-stack(layers2)
layers3<-stack(layers3)
layers4<-stack(layers4)
layers5<-stack(layers5)
layers_scb<-stack(layers_scb)

#Load presence data for each study area 
spdata1<-read.csv("/PresenceData/g1.speciesdata.pr.csv",sep=",",header=T)
spdata1<-spdata1[,c("Longitude","Latitude")]
spdata2<-read.csv("/PresenceData/g2.speciesdata.pr.csv",sep=",",header=T)
spdata2<-spdata2[,c("Longitude","Latitude")]
spdata3<-read.csv("/PresenceData/g3.speciesdata.pr.csv",sep=",",header=T)
spdata3<-spdata3[,c("Longitude","Latitude")]
spdata4<-read.csv("/PresenceData/g4.speciesdata.pr.csv",sep=",",header=T)
spdata4<-spdata4[,c("Longitude","Latitude")]
spdata5<-read.csv("/PresenceData/g5.speciesdata.pr.csv",sep=",",header=T)
spdata5<-spdata5[,c("Longitude","Latitude")]
spdata_scb<-read.csv("/PresenceData/species.data.pr.csv",sep=",",header=T)
spdata_scb<-spdata_scb[,c("Longitude","Latitude")]

# Extract background data
# Create a cloud of random points
backgr1 <- data.frame(rasterToPoints(layers1[[1]]))[,-3] 
backgr1 <- sample_n(backgr``,10000,replace=T)
backgr2 <- data.frame(rasterToPoints(layers2[[1]]))[,-3] 
backgr2 <- sample_n(backgr2,10000,replace=T)
backgr3 <- data.frame(rasterToPoints(layers3[[1]]))[,-3] 
backgr3 <- sample_n(backgr3,10000,replace=T)
backgr4 <- data.frame(rasterToPoints(layers4[[1]]))[,-3] 
backgr4 <- sample_n(backgr4,10000,replace=T)
backgr5 <- data.frame(rasterToPoints(layers5[[1]]))[,-3] 
backgr5 <- sample_n(backgr5,10000,replace=T)
backgr_scb <- data.frame(rasterToPoints(layers_scb[[1]]))[,-3] 
backgr_scb <- sample_n(backgr_scb,10000,replace=T)

colnames(backgr1) <-c("Longitude","Latitude")
colnames(backgr2) <-c("Longitude","Latitude")
colnames(backgr3) <-c("Longitude","Latitude")
colnames(backgr4) <-c("Longitude","Latitude")
colnames(backgr5) <-c("Longitude","Latitude")
colnames(backgr_scb) <-c("Longitude","Latitude")

jar<-paste(system.file(package="dismo"),"/java/maxent.jar",sep='')


#Run ENMevaluate to determine best feature curve (fc; linear versus quadratic) and regularizing multiplier (rm; 1:10)
enm1 <- ENMevaluate(occs=spdata1,envs=layers1,bg=backgr1,algorithm="maxent.jar",
                    tune.args = list(fc=c("L","Q"),rm=1:10),method='checkerboard2', 
                    bin.output=TRUE)
enm2 <- ENMevaluate(occs=spdata2,envs=layers2,bg=backgr2,algorithm="maxent.jar",
                    tune.args = list(fc=c("L","Q"),rm=1:10),method='checkerboard2', 
                    bin.output=TRUE)
enm3 <- ENMevaluate(occs=spdata3,envs=layers3,bg=backgr3,algorithm="maxent.jar",
                    tune.args = list(fc=c("L","Q"),rm=1:10),method='checkerboard2', 
                    bin.output=TRUE)
enm4 <- ENMevaluate(occs=spdata4,envs=layers4,bg=backgr4,algorithm="maxent.jar",
                    tune.args = list(fc=c("L","Q"),rm=1:10),method='checkerboard2', 
                    bin.output=TRUE)
enm5 <- ENMevaluate(occs=spdata5,envs=layers5,bg=backgr5,algorithm="maxent.jar",
                    tune.args = list(fc=c("L","Q"),rm=1:10),method='checkerboard2', 
                    bin.output=TRUE)
enm_scb <- ENMevaluate(occs=spdata_scb,envs=layers_scb,bg=backgr_scb,algorithm="maxent.jar",
                       tune.args = list(fc=c("L","Q"),rm=1:10),method='checkerboard2', 
                       bin.output=TRUE)

#Develop df with fc, rm, and aicc
aics1 <-  data.frame(fc=enm1@results$fc,rm=enm1@results$rm,AICc=enm1@results$AICc)
aics2 <-  data.frame(fc=enm2@results$fc,rm=enm2@results$rm,AICc=enm2@results$AICc)
aics3 <-  data.frame(fc=enm3@results$fc,rm=enm3@results$rm,AICc=enm3@results$AICc)
aics4 <-  data.frame(fc=enm4@results$fc,rm=enm4@results$rm,AICc=enm4@results$AICc)
aics5 <-  data.frame(fc=enm5@results$fc,rm=enm5@results$rm,AICc=enm5@results$AICc)
aics_scb <-  data.frame(fc=enm_scb@results$fc,rm=enm_scb@results$rm,AICc=enm_scb@results$AICc)


#Plot aicc for each study area by fc to determine best study area specific fc and rm 

# Develop plot with legend 
aics1_plot <- ggplot(data=aics1,aes(x=as.factor(rm),y=AICc,color=fc))+
  geom_point()+
  geom_line(aes(group=fc))+
  theme_classic()+
  labs(x="Regularizing Multiplier",y="AICc")+
  theme(plot.title = element_blank(),
        axis.text.x = element_text(size=10,face='bold',color='black'),
        axis.text.y=element_text(size=10,face='bold',color='black'),
        legend.title=element_text(size=14,face='bold'),
        legend.text = element_text(face='bold',size=10,color='black'),
        axis.title = element_text(size=14,face='bold'),
        legend.position='bottom',
        plot.margin = unit(c(1,1,1,1),'cm'),
        panel.background = element_rect(fill="white"),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border=element_blank(),
        axis.line = element_line(color="black"))+
  scale_color_discrete(name="Feature Class",
                       labels=c("linear","quadratic"),
                       breaks=c("L","Q"))

legend <- get_legend(aics1_plot) #grab legend from aics1_plot to serve as universal legend for all study areas

#develop plots for each study area without a specified (to use universal legend) 
aics1_plot <- ggplot(data=aics1,aes(x=as.factor(rm),y=AICc,color=fc))+
  geom_point()+
  geom_line(aes(group=fc))+
  theme_classic()+
  labs(x="Regularizing Multiplier",y="AICc")+
  theme(plot.title = element_blank(),
        axis.text.x = element_text(size=10,face='bold',color='black'),
        axis.text.y=element_text(size=10,face='bold',color='black'),
        legend.title=element_text(size=14,face='bold'),
        legend.text = element_text(face='bold',size=10,color='black'),
        axis.title = element_text(size=14,face='bold'),
        legend.position='none',
        plot.margin = unit(c(1,1,1,1),'cm'),
        panel.background = element_rect(fill="white"),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border=element_blank(),
        axis.line = element_line(color="black"))+
  scale_color_discrete(name="Feature Class",
                       labels=c("linear","quadratic"),
                       breaks=c("L","Q"))


aics2_plot<- ggplot(data=aics2,aes(x=as.factor(rm),y=AICc,color=fc))+
  geom_point()+
  geom_line(aes(group=fc))+
  theme_classic()+
  labs(x="Regularizing Multiplier",y="AICc")+
  theme(plot.title = element_blank(),
        axis.text.x = element_text(size=10,face='bold',color='black'),
        axis.text.y=element_text(size=10,face='bold',color='black'),
        legend.title=element_text(size=14,face='bold'),
        legend.text = element_text(face='bold',size=10,color='black'),
        axis.title = element_text(size=14,face='bold'),
        legend.position='none',
        plot.margin = unit(c(1,1,1,1),'cm'),
        panel.background = element_rect(fill="white"),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border=element_blank(),
        axis.line = element_line(color="black"))+
  scale_color_discrete(name="Feature Class",
                       labels=c("linear","quadratic"),
                       breaks=c("L","Q"))

aics3_plot <- ggplot(data=aics3,aes(x=as.factor(rm),y=AICc,color=fc))+
  geom_point()+
  geom_line(aes(group=fc))+
  theme_classic()+
  labs(x="Regularizing Multiplier",y="AICc")+
  theme(plot.title = element_blank(),
        axis.text.x = element_text(size=10,face='bold',color='black'),
        axis.text.y=element_text(size=10,face='bold',color='black'),
        legend.title=element_text(size=14,face='bold'),
        legend.text = element_text(face='bold',size=10,color='black'),
        axis.title = element_text(size=14,face='bold'),
        legend.position='none',
        plot.margin = unit(c(1,1,1,1),'cm'),
        panel.background = element_rect(fill="white"),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border=element_blank(),
        axis.line = element_line(color="black"))+
  scale_color_discrete(name="Feature Class",
                       labels=c("linear","quadratic"),
                       breaks=c("L","Q"))

aics4_plot <- ggplot(data=aics4,aes(x=as.factor(rm),y=AICc,color=fc))+
  geom_point()+
  geom_line(aes(group=fc))+
  theme_classic()+
  labs(x="Regularizing Multiplier",y="AICc")+
  theme(plot.title = element_blank(),
        axis.text.x = element_text(size=10,face='bold',color='black'),
        axis.text.y=element_text(size=10,face='bold',color='black'),
        legend.title=element_text(size=14,face='bold'),
        legend.text = element_text(face='bold',size=10,color='black'),
        axis.title = element_text(size=14,face='bold'),
        legend.position='none',
        plot.margin = unit(c(1,1,1,1),'cm'),
        panel.background = element_rect(fill="white"),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border=element_blank(),
        axis.line = element_line(color="black"))+
  scale_color_discrete(name="Feature Class",
                       labels=c("linear","quadratic"),
                       breaks=c("L","Q"))

aics5_plot <- ggplot(data=aics5,aes(x=as.factor(rm),y=AICc,color=fc))+
  geom_point()+
  geom_line(aes(group=fc))+
  theme_classic()+
  labs(x="Regularizing Multiplier",y="AICc")+
  theme(plot.title = element_blank(),
        axis.text.x = element_text(size=10,face='bold',color='black'),
        axis.text.y=element_text(size=10,face='bold',color='black'),
        legend.title=element_text(size=14,face='bold'),
        legend.text = element_text(face='bold',size=10,color='black'),
        axis.title = element_text(size=14,face='bold'),
        legend.position='none',
        plot.margin = unit(c(1,1,1,1),'cm'),
        panel.background = element_rect(fill="white"),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border=element_blank(),
        axis.line = element_line(color="black"))+
  scale_color_discrete(name="Feature Class",
                       labels=c("linear","quadratic"),
                       breaks=c("L","Q"))

aics_scb_plot <- ggplot(data=aics_scb,aes(x=as.factor(rm),y=AICc,color=fc))+
  geom_point()+
  geom_line(aes(group=fc))+
  theme_classic()+
  labs(x="Regularizing Multiplier",y="AICc")+
  theme(plot.title = element_blank(),
        axis.text.x = element_text(size=10,face='bold',color='black'),
        axis.text.y=element_text(size=10,face='bold',color='black'),
        legend.title=element_text(size=14,face='bold'),
        legend.text = element_text(face='bold',size=10,color='black'),
        axis.title = element_text(size=14,face='bold'),
        legend.position='none',
        plot.margin = unit(c(1,1,1,1),'cm'),
        panel.background = element_rect(fill="white"),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border=element_blank(),
        axis.line = element_line(color="black"))+
  scale_color_discrete(name="Feature Class",
                       labels=c("linear","quadratic"),
                       breaks=c("L","Q"))

# Visualize all AICc plots in a single figure
ggpubr::ggarrange(aics1_plot, aics3_plot,aics2_plot,aics4_plot,aics5_plot,aics_scb_plot, # list of plots
                  labels = c('A', 'B',"C","D","E","F"), # labels
                  common.legend = T, # COMMON LEGEND
                  legend = "bottom", # legend position
                  align = "hv", # Align them both, horizontal and vertical
                  nrow = 2, # number of rows
                  ncol=3,
                  font.label=list(size=12))  # number of cols



